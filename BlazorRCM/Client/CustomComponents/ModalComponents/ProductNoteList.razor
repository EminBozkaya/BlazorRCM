@using System.Text
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="height: 600px;max-width:none;overflow-y: scroll;overflow-x: scroll">
            <MudStack>
                <MudItem Class="ma-auto">
                    <MudGrid Class="py-4">


                        <MudCard Class="mx-4 my-2">
                            <MudStack>
                                <MudFab StartIcon="@Icons.Filled.TouchApp" Style="@($"color:{Colors.Grey.Darken4};background:{Colors.Lime.Accent3};width:370px;height:60px")" OnClick="@((e) => ClickToChangeActiveNote(0))" Label="Ürün Genel" />
                                <MudStack Row="true">
                                    <MudTextField @ref="generalNoteReference" Style="margin-top:-5px" T="string" Label="Ürün Genel Not" Variant="Variant.Outlined" @bind-Value="@generalPrdctNote" Lines="9" AutoFocus="true" OnKeyUp="SubmitEnter" />
                                    <MudStack Style="padding-top:2px">
                                        <MudButton Style="width:60px;height:99px;margin-left:-8px" OnClick="@((e) => RemoveNote(0))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Secondary" Size="Size.Large" />
                                        <MudButton Style="width:60px;height:99px;margin-left:-8px;margin-top:-5px" OnClick="@((e) => ClearList(0))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DeleteSweep" IconColor="Color.Secondary" Size="Size.Large" />
                                    </MudStack>
                                </MudStack>
                            </MudStack>
                        </MudCard>


                        <MudCard Class="mx-3 my-2">
                            <MudStack>
                                <MudFab StartIcon="@Icons.Filled.TouchApp" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};height:55px")" OnClick="@((e) => ClickToChangeActiveNote(1))" Label="@productName" />
                                <MudStack Row="true">
                                    <MudTextField @ref="firstNoteReference" T="string" Label="Ürün Not" Variant="Variant.Outlined" @bind-Value="@firstPrdctNote" Lines="9" OnKeyUp="SubmitEnter" />
                                    <MudStack Style="padding-top:8px">
                                    <MudButton Style="width:60px;height:99px;margin-left:-8px" OnClick="@((e) => RemoveNote(1))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Secondary" Size="Size.Large" />
                                    <MudButton Style="width:60px;height:99px;margin-left:-8px;margin-top:-5px" OnClick="@((e) => ClearList(1))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DeleteSweep" IconColor="Color.Secondary" Size="Size.Large" />
                                </MudStack>
                                </MudStack>
                            </MudStack>
                        </MudCard>


                        <MudCard Class="mx-3 my-2">
                            <MudStack>
                                <MudFab StartIcon="@Icons.Filled.TouchApp" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};height:55px")" OnClick="@((e) => ClickToChangeActiveNote(2))" Label="@productName" />
                                <MudStack Row="true">
                                    <MudTextField @ref="secondNoteReference" T="string" Label="Ürün Not" Variant="Variant.Outlined" @bind-Value="@secondPrdctNote" Lines="9" OnKeyUp="SubmitEnter" />
                                    <MudStack Style="padding-top:8px">
                                    <MudButton Style="width:60px;height:99px;margin-left:-8px" OnClick="@((e) => RemoveNote(2))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Secondary" Size="Size.Large" />
                                    <MudButton Style="width:60px;height:99px;margin-left:-8px;margin-top:-5px" OnClick="@((e) => ClearList(2))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DeleteSweep" IconColor="Color.Secondary" Size="Size.Large" />
                                </MudStack>
                                </MudStack>
                            </MudStack>
                        </MudCard>


                        <MudCard Class="mx-3 my-2">
                            <MudStack>
                                <MudFab StartIcon="@Icons.Filled.TouchApp" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};height:55px")" OnClick="@((e) => ClickToChangeActiveNote(3))" Label="@productName" />
                                <MudStack Row="true">
                                    <MudTextField @ref="thirdNoteReference" T="string" Label="Ürün Not" Variant="Variant.Outlined" @bind-Value="@thirdPrdctNote" Lines="9" OnKeyUp="SubmitEnter" />
                                    <MudStack Style="padding-top:8px">
                                    <MudButton Style="width:60px;height:99px;margin-left:-8px" OnClick="@((e) => RemoveNote(3))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Secondary" Size="Size.Large" />
                                    <MudButton Style="width:60px;height:99px;margin-left:-8px;margin-top:-5px" OnClick="@((e) => ClearList(3))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DeleteSweep" IconColor="Color.Secondary" Size="Size.Large" />
                                </MudStack>
                                </MudStack>
                            </MudStack>
                        </MudCard>

                    </MudGrid>
                </MudItem>
                <MudItem Class="ma-auto">
                    <MudCard>
                        @foreach (ProductSaleNoteDTO item in RemoveList!)
                        {
                            <MudButton Variant="Variant.Outlined" OnClick="() => AddToNote(item)" Class="ma-1" StartIcon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Warning" Style="width: 165px; height: 50px;">@item.Definition</MudButton>
                        }
                    </MudCard>
                    <MudCard>
                        @foreach (ProductSaleNoteDTO item in LotsOfList!)
                        {
                            <MudButton Variant="Variant.Outlined" OnClick="() => AddToNote(item)" Class="ma-1" Color="Color.Primary" Style="width: 165px; height: 50px;">@item.Definition</MudButton>
                        }
                    </MudCard>
                    <MudCard>
                        @foreach (ProductSaleNoteDTO item in LittleList!)
                        {
                            <MudButton Variant="Variant.Outlined" OnClick="() => AddToNote(item)" Class="ma-1" Color="Color.Error" Style="width: 165px; height: 50px;">@item.Definition</MudButton>
                        }
                    </MudCard>
                    <MudCard>
                        <MudStack Row="true">
                            <MudCard>
                                <MudCard>
                                    @foreach (ProductSaleNoteDTO item in IncludeList!)
                                    {
                                        <MudButton Variant="Variant.Outlined" OnClick="() => AddToNote(item)" StartIcon="@Icons.Filled.Add" Class="ma-1" Color="Color.Tertiary" Style="width: 165px; height: 50px;">@item.Definition</MudButton>
                                    }
                                </MudCard>
                                <MudCard>
                                    @foreach (ProductSaleNoteDTO item in LavashList!)
                                    {
                                        <MudButton Variant="Variant.Text" OnClick="() => AddToNote(item)" StartIcon="@Icons.Filled.AutoFixNormal" Class="ma-1" Style="width: 120px; height: 60px;">@item.Definition</MudButton>
                                    }
                                    @foreach (ProductSaleNoteDTO item in OtherNoteList!)
                                    {
                                        <MudButton Variant="Variant.Outlined" OnClick="() => AddToNote(item)" Class="ma-1" Color="Color.Surface" Style="width: 120px; height: 60px;">@item.Definition</MudButton>
                                    }
                                </MudCard>
                            </MudCard>
                            <MudCard>
                                <MudButton Color="Color.Success" OnClick="Submit" Style="width: 160px; height: 125px;" Variant="Variant.Filled">Onayla</MudButton>
                                <MudButton Color="Color.Error" OnClick="Cancel" Style="width: 160px; height: 125px;" Variant="Variant.Filled">Vazgeç</MudButton>

                            </MudCard>
                        </MudStack>
                    </MudCard>
                </MudItem>
            </MudStack>
        </MudContainer>


        @*<MudTextField @bind-Value="note" Label="Max Length" Variant="Variant.Text" OnKeyUp="SubmitEnter" />*@
    </DialogContent>
    @*<DialogActions>

        </DialogActions>*@
</MudDialog>
@code {

    protected async override Task OnInitializedAsync()
    {
        ProductSaleNoteList = await LocalStorageExtension.ProductSaleNoteList(LocalStorageService!);
        foreach (ProductSaleNoteDTO item in ProductSaleNoteList!)
        {
            if (item.NoteCat == 1) LotsOfList!.Add(item);
            if (item.NoteCat == 2) LittleList!.Add(item);
            if (item.NoteCat == 3) RemoveList!.Add(item);
            if (item.NoteCat == 4) IncludeList!.Add(item);
            if (item.NoteCat == 5) LavashList!.Add(item);
            if (item.NoteCat == 6) OtherNoteList!.Add(item);
        }

        if (generalProductNote != null)
            generalPrdctNote = StringToStringBuilder(generalProductNote, 0);
        if (firstProductNote != null)
            firstPrdctNote = StringToStringBuilder(firstProductNote, 1);
        if (secondProductNote != null)
            secondPrdctNote = StringToStringBuilder(secondProductNote, 2);
        if (thirdProductNote != null)
            thirdPrdctNote = StringToStringBuilder(thirdProductNote, 3);

        //if (ResultDTO.generalProductNote != null)
        //    generalPrdctNote = StringToStringBuilder(ResultDTO.generalProductNote);
        //if (ResultDTO.firstProductNote != null)
        //    firstPrdctNote = StringToStringBuilder(ResultDTO.firstProductNote);
        //if (ResultDTO.secondProductNote != null)
        //    secondPrdctNote = StringToStringBuilder(ResultDTO.secondProductNote);
        //if (ResultDTO.thirdProductNote != null)
        //    thirdPrdctNote = StringToStringBuilder(ResultDTO.thirdProductNote);

    }

    public string StringToStringBuilder(string line, int i)
    {
        StringBuilder sbuilt = new();
        String[] lines = line.Split("\n");
        foreach (string item in lines)
        {
            if (item != "")
                sbuilt.AppendLine(item);
        }
        switch (i)
        {
            case 0:
                sb0 = sbuilt;
                break;
            case 1:
                sb1 = sbuilt;
                break;
            case 2:
                sb2 = sbuilt;
                break;
            case 3:
                sb3 = sbuilt;
                break;

        }
        return sbuilt.ToString().Trim();
    }

    public async Task AddToNote(ProductSaleNoteDTO item)
    {
        switch (activeNote)
        {
            case 0:
                if (generalPrdctNote != null)
                {
                    generalPrdctNote.Trim();
                    StringToStringBuilder(generalPrdctNote, 0);
                }
                sb0.AppendLine(item.Definition);
                generalPrdctNote = sb0.ToString();
                await generalNoteReference!.FocusAsync();
                //ResultDTO.generalProductNote = sb0!.ToString();
                break;
            case 1:
                if (firstPrdctNote != null)
                {
                    firstPrdctNote.Trim();
                    StringToStringBuilder(firstPrdctNote, 1);
                }
                sb1.AppendLine(item.Definition);
                firstPrdctNote = sb1.ToString();
                await firstNoteReference!.FocusAsync();
                //ResultDTO.firstProductNote = sb1!.ToString();
                break;
            case 2:
                if (secondPrdctNote != null)
                {
                    secondPrdctNote.Trim();
                    StringToStringBuilder(secondPrdctNote, 2);
                }
                sb2.AppendLine(item.Definition);
                secondPrdctNote = sb2.ToString();
                await secondNoteReference!.FocusAsync();
                //ResultDTO.secondProductNote = sb2!.ToString();
                break;
            case 3:
                if (thirdPrdctNote != null)
                {
                    thirdPrdctNote.Trim();
                    StringToStringBuilder(thirdPrdctNote, 3);
                }
                sb3.AppendLine(item.Definition);
                thirdPrdctNote = sb3.ToString();
                await thirdNoteReference!.FocusAsync();
                //ResultDTO.thirdProductNote = sb3!.ToString();
                break;
        }
    }

    public async Task RemoveNote(int i)
    {
        StringBuilder sbuilt = new();
        String[]? lines = null;
        switch (i)
        {
            case 0:
                if (generalPrdctNote != null)
                {
                    lines = generalPrdctNote.Split("\n");
                    Array.Resize(ref lines, lines.Length - 1);
                    foreach (string item in lines!)
                    {
                        if (item != "")
                            sbuilt.AppendLine(item);
                    }
                    sb0 = sbuilt;
                    generalPrdctNote = sbuilt.ToString().Trim();
                }
                activeNote = 0;
                await generalNoteReference!.FocusAsync();
                break;
            case 1:
                if (firstPrdctNote != null)
                {
                    lines = firstPrdctNote.Split("\n");
                    Array.Resize(ref lines, lines.Length - 1);
                    foreach (string item in lines!)
                    {
                        if (item != "")
                            sbuilt.AppendLine(item);
                    }
                    sb1 = sbuilt;
                    firstPrdctNote = sbuilt.ToString().Trim();
                }
                activeNote = 1;
                await firstNoteReference!.FocusAsync();
                break;
            case 2:
                if (secondPrdctNote != null)
                {
                    lines = secondPrdctNote.Split("\n");
                    Array.Resize(ref lines, lines.Length - 1);
                    foreach (string item in lines!)
                    {
                        if (item != "")
                            sbuilt.AppendLine(item);
                    }
                    sb2 = sbuilt;
                    secondPrdctNote = sbuilt.ToString().Trim();
                }
                activeNote = 2;
                await secondNoteReference!.FocusAsync();
                break;
            case 3:
                if (thirdPrdctNote != null)
                {
                    lines = thirdPrdctNote.Split("\n");
                    Array.Resize(ref lines, lines.Length - 1);
                    foreach (string item in lines!)
                    {
                        if (item != "")
                            sbuilt.AppendLine(item);
                    }
                    sb3 = sbuilt;
                    thirdPrdctNote = sbuilt.ToString().Trim();
                }
                activeNote = 3;
                await thirdNoteReference!.FocusAsync();
                break;

        }
    }

    public async Task ClearList(int i)
    {
        switch (i)
        {
            case 0:
                sb0 = new();
                generalPrdctNote = null;
                activeNote = 0;
                await generalNoteReference!.FocusAsync();
                break;
            case 1:
                sb1 = new();
                firstPrdctNote = null;
                activeNote = 1;
                await firstNoteReference!.FocusAsync();
                break;
            case 2:
                sb2 = new();
                secondPrdctNote = null;
                activeNote = 2;
                await secondNoteReference!.FocusAsync();
                break;
            case 3:
                sb3 = new();
                thirdPrdctNote = null;
                activeNote = 3;
                await thirdNoteReference!.FocusAsync();
                break;

        }
    }

    public async Task ClickToChangeActiveNote(int i)
    {
        activeNote = i;
        switch (activeNote)
        {
            case 0:
                await generalNoteReference!.FocusAsync();
                break;
            case 1:
                await firstNoteReference!.FocusAsync();
                break;
            case 2:
                await secondNoteReference!.FocusAsync();
                break;
            case 3:
                await thirdNoteReference!.FocusAsync();
                break;

        }
    }



    void SubmitEnter(KeyboardEventArgs args)
    {
        //var code = args.Code;
        //if (code == "NumpadEnter" || code == "Enter")
        //{
        //    ProductNoteModalResultDTO ResultDTO = new();
        //    ResultDTO.generalProductNote = (generalPrdctNote == null || generalPrdctNote == "" || generalPrdctNote.Trim() == "") ? null : generalPrdctNote!.Trim();
        //    ResultDTO.firstProductNote = (firstPrdctNote == null || firstPrdctNote == "" || firstPrdctNote.Trim() == "") ? null : firstPrdctNote.Trim();
        //    ResultDTO.secondProductNote = (secondPrdctNote == null || secondPrdctNote == "" || secondPrdctNote.Trim() == "") ? null : secondPrdctNote.Trim();
        //    ResultDTO.thirdProductNote = (thirdPrdctNote == null || thirdPrdctNote == "" || thirdPrdctNote.Trim() == "") ? null : thirdPrdctNote.Trim();
        //    MudDialog!.Close(DialogResult.Ok(ResultDTO));
        //}
    }

    void Submit()
    {
        ProductNoteModalResultDTO ResultDTO = new();
        ResultDTO.generalProductNote = (generalPrdctNote == null || generalPrdctNote == "" || generalPrdctNote.Trim() == "") ? null : generalPrdctNote!.Trim();
        ResultDTO.firstProductNote = (firstPrdctNote == null || firstPrdctNote == "" || firstPrdctNote.Trim() == "") ? null : firstPrdctNote.Trim();
        ResultDTO.secondProductNote = (secondPrdctNote == null || secondPrdctNote == "" || secondPrdctNote.Trim() == "") ? null : secondPrdctNote.Trim();
        ResultDTO.thirdProductNote = (thirdPrdctNote == null || thirdPrdctNote == "" || thirdPrdctNote.Trim() == "") ? null : thirdPrdctNote.Trim();
        MudDialog!.Close(DialogResult.Ok(ResultDTO));
    }
    void Cancel() => MudDialog!.Cancel();

    //public void WhenTextChange(int i)
    //{
    //    switch (i)
    //    {
    //        case 0:
    //            //generalPrdctNote = sb0.ToString();
    //            //await generalNoteReference!.FocusAsync();

    //            generalPrdctNote = StringToStringBuilder(generalPrdctNote!, 0);
    //            break;
    //        //case 1:
    //        //    sb1 = sbuilt;
    //        //    break;
    //        //case 2:
    //        //    sb2 = sbuilt;
    //        //    break;
    //        //case 3:
    //        //    sb3 = sbuilt;
    //        //    break;

    //    }
    //}

    //public async Task SaveChangesWhenLeave(int i)
    //{
    //    await Task.Delay(10);
    //    activeNote = i;
    //    switch (activeNote)
    //    {
    //        case 0:
    //            generalPrdctNote = StringToStringBuilder(generalNoteReference!.Text, 0);
    //            break;
    //        case 1:
    //            firstPrdctNote = StringToStringBuilder(firstNoteReference!.Text, 1);
    //            break;
    //        case 2:
    //            secondPrdctNote = StringToStringBuilder(secondNoteReference!.Text, 2);
    //            break;
    //        case 3:
    //            thirdPrdctNote = StringToStringBuilder(thirdNoteReference!.Text, 3);
    //            break;
    //    }
    //}





    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Inject]
    ILocalStorageService? LocalStorageService { get; set; }

    //[Parameter]
    //public string? note { get; set; }

    [Parameter]
    public List<ProductSaleNoteDTO>? ProductSaleNoteList { get; set; }

    [Parameter]
    public string? productName { get; set; }

    //[Parameter]
    //public ProductNoteModalResultDTO? ResultDTO { get; set; }

    [Parameter]
    public string? generalProductNote { get; set; }

    [Parameter]
    public string? firstProductNote { get; set; }

    [Parameter]
    public string? secondProductNote { get; set; }

    [Parameter]
    public string? thirdProductNote { get; set; }

    public string? generalPrdctNote;
    public string? firstPrdctNote;
    public string? secondPrdctNote;
    public string? thirdPrdctNote;

    public List<ProductSaleNoteDTO> LittleList = new();
    public List<ProductSaleNoteDTO> LotsOfList = new();
    public List<ProductSaleNoteDTO> RemoveList = new();
    public List<ProductSaleNoteDTO> IncludeList = new();
    public List<ProductSaleNoteDTO> LavashList = new();
    public List<ProductSaleNoteDTO> OtherNoteList = new();

    public int activeNote;

    private MudTextField<string>? generalNoteReference;
    private MudTextField<string>? firstNoteReference;
    private MudTextField<string>? secondNoteReference;
    private MudTextField<string>? thirdNoteReference;
    //private MudTextField<string>? fourthNoteReference;
    //private MudTextField<string>? fifthNoteReference;
    //private MudTextField<string>? sixthNoteReference;


    //public string? fourthProductNote;
    //public string? fifthProductNote;
    //public string? sixthProductNote;

    public StringBuilder sb0 = new();
    public StringBuilder sb1 = new();
    public StringBuilder sb2 = new();
    public StringBuilder sb3 = new();
    //public StringBuilder sb4 = new();
    //public StringBuilder sb5 = new();
    //public StringBuilder sb6 = new();

    //public bool autoFocusGen;
    //public bool autoFocus1;
    //public bool autoFocus2;
    //public bool autoFocus3;
    //public bool autoFocus4;
    //public bool autoFocus5;
    //public bool autoFocus6;



}