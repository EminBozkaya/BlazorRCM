@inherits LayoutComponentBase
@inject IJSRuntime _jsRuntime

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
@*<MudThemeProvider Theme="MyCustomTheme"/>*@
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <div Style="color:white"><MudBreadcrumbs Items="_items"></MudBreadcrumbs></div>
        <MudSpacer />
        <MudIconButton><MudAvatar id="getir" Image="MyImages/Layout/Getir_icon.ico" /></MudIconButton>
        <MudIconButton><MudAvatar id="yemekSepeti" Image="MyImages/Layout/yemekSepeti.ico" /></MudIconButton>
        <MudIconButton Icon="fas fa-solid fa-user" Color="Color.Inherit"></MudIconButton>
        <MudToggleIconButton ToggledChanged="UpdateTheme"
                             Icon="@Icons.TwoTone.DarkMode" Color="@Color.Inherit"
                             ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="@Color.Inherit" />
        <MudToggleIconButton ToggledChanged="ToggleFullScreen"
                             Icon="@Icons.Filled.Fullscreen" Color="@Color.Inherit" Size="Size.Large"
                             ToggledIcon="@Icons.Filled.FullscreenExit" ToggledColor="@Color.Inherit" />

    </MudAppBar>


    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">

        <MudDrawerHeader Style="display: inline-table; text-align: center">
            <MudImage Src="MyImages/Layout/oncu.png" Alt="Mony the dog" Elevation="10" Height="150" Class="rounded-circle" />
        </MudDrawerHeader>

        <NavMenu />

    </MudDrawer>

    <MudMainContent Class="pt-12">
        <MudContainer Class="ps-2" MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>



@code {

    private List<MudBlazor.BreadcrumbItem> _items = new List<MudBlazor.BreadcrumbItem>
    {
        new MudBlazor.BreadcrumbItem("Hızlı Satış", href:"/instoresale", icon: @Icons.Filled.Restaurant),
        new MudBlazor.BreadcrumbItem("Telefon Satışları", href:"/phonesale", icon: @Icons.Filled.Phone),
    };

    private IJSObjectReference? _jsModule;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    [Inject]
    NavigationManager? NavigationManager { get; set; }

    [Inject]
    IJSRuntime? JSRuntime { get; set;  }

    private bool _drawerOpen = false;
    private bool fullScreen = true;
    private bool _isDarkMode = false;
    private bool themeModeSwitch = false;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthState!;

        if (authState.User.Identity!.IsAuthenticated)
        {
            //authState.User.Claims.FirstOrDefault(i => i.ValueType == ClaimTypes.EMail);

            //logingUserName = await LocalStorageService!.GetItemAsStringAsync("fullname");
            //visibility = "visible";

            //var themeName = "5";

            //var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./MyScripts/site.js");
            //await module.InvokeVoidAsync("setTheme", themeName);


            //await _jsRuntime!.InvokeAsync<object>("setTheme", themeName);
            //StateHasChanged();

            _jsModule = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./MyScripts/site.js");
        }
        else
        {
            NavigationManager!.NavigateTo("/login");
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task UpdateTheme()
    {
        string themeName = themeModeSwitch ? "5" : "5-dark";
        await _jsModule!.InvokeVoidAsync("setTheme", themeName);
        _isDarkMode = !_isDarkMode;
        themeModeSwitch = !themeModeSwitch;
    }

    public async Task ToggleFullScreen()
    {
        string invokeJS = fullScreen ? "openFullscreen" : "closeFullscreen";
        await JSRuntime!.InvokeVoidAsync(invokeJS);
        fullScreen = !fullScreen;
    }
}
