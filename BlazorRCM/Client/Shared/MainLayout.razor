@inherits LayoutComponentBase
@inject IJSRuntime _jsRuntime


<MudThemeProvider @bind-IsDarkMode="@_isDarkMode"/>
@*<MudThemeProvider Theme="MyCustomTheme"/>*@
<MudDialogProvider />
<MudSnackbarProvider />


@*<SfDashboardLayout>*@
<MudLayout>
@*<MudLayout Class="@visibility">*@
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <div Style="color:white"><MudBreadcrumbs Items="_items"></MudBreadcrumbs></div>
        <MudSpacer />
        <MudIconButton><MudAvatar id="getir" Image="MyImages/Layout/Getir_icon.ico" /></MudIconButton>
        <MudIconButton><MudAvatar id="yemekSepeti" Image="MyImages/Layout/yemekSepeti.ico" /></MudIconButton>
        <MudIconButton Icon="fas fa-solid fa-user" Color="Color.Inherit"></MudIconButton>
        @*<MudSwitch CheckedChanged="UpdateTheme" Color="Color.Primary" Class="ma-4" T="bool" Label="Koyu Mod" />*@
        <MudToggleIconButton ToggledChanged="UpdateTheme"
                     Icon="@Icons.TwoTone.DarkMode" Color="@Color.Inherit"
                     ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="@Color.Inherit"/>
        @*<MudSwitch @bind-Checked="_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Koyu Mod"/>*@
    </MudAppBar>


    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">

        <MudDrawerHeader Style="display: inline-table; text-align: center">
            <MudImage Src="MyImages/Layout/oncu.png" Alt="Mony the dog" Elevation="10" Height="150" Class="rounded-circle" />
        </MudDrawerHeader>

        <NavMenu />

    </MudDrawer>

    <MudMainContent Class="pt-12">
        <MudContainer Class="ps-2" MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@*</SfDashboardLayout>*@
@code {
    [Inject]
    ILocalStorageService? localStorageService { get; set; }

    //private string visibility = "invisible";
    private bool _isDarkMode;
    private List<MudBlazor.BreadcrumbItem> _items = new List<MudBlazor.BreadcrumbItem>
    {
        new MudBlazor.BreadcrumbItem("Hızlı Satış", href:"/instoresale", icon: @Icons.Filled.Restaurant),
        new MudBlazor.BreadcrumbItem("Telefon Satışları", href:"/phonesale", icon: @Icons.Filled.Phone),
    };

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    [Inject]
    ILocalStorageService? LocalStorageService { get; set; }

    [Inject]
    NavigationManager? NavigationManager { get; set; }



    protected async override Task OnInitializedAsync()
    {
        //var authState = await AuthState!;

        //if (authState.User.Identity!.IsAuthenticated)
        //{
            //authState.User.Claims.FirstOrDefault(i => i.ValueType == ClaimTypes.EMail);

            //logingUserName = await LocalStorageService!.GetItemAsStringAsync("fullname");
            //visibility = "visible";

            //var themeName = "5";

            //var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./MyScripts/site.js");
            //await module.InvokeVoidAsync("setTheme", themeName);
            await localStorageService!.SetItemAsync("themeModeSwitch", false);
            //await _jsRuntime!.InvokeAsync<object>("setTheme", themeName);
            //StateHasChanged();
        //}
        //else
        //{
        //    NavigationManager!.NavigateTo("/login");
        //}
    }

    private async Task  UpdateTheme()
    {
        bool themeModeSwitch = await localStorageService!.GetItemAsync<bool>("themeModeSwitch");
        string themeName = themeModeSwitch ? "5" : "5-dark";
        //themeModeSwitch= true ? false : true;

        if (themeModeSwitch == false) themeModeSwitch = true;
        else themeModeSwitch = false;
        _isDarkMode = themeModeSwitch;

        await localStorageService!.SetItemAsync("themeModeSwitch", themeModeSwitch);

        //await _jsRuntime!.InvokeAsync<object>("setTheme", themeName);
        //StateHasChanged();

        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./MyScripts/site.js");
        await module.InvokeVoidAsync("setTheme", themeName);
        
    }
}
