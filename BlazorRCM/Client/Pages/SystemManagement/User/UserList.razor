@page "/userlist"

@inherits UserListProcess


@using System.Net.Http.Json
@using BlazorRCM.Shared.DTOs
@inject HttpClient httpClient

<MudDataGrid MultiSelection="true" Items="@UserList" Sortable="true" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Kullanıcılar</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="UserDTO" Field="UId" Title="ID" />
        <Column T="UserDTO" Field="FirstName" />
        <Column T="UserDTO" Field="LastName"/>
        <Column T="UserDTO" Field="UserName" />
        <Column T="UserDTO" Field="Phone"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserDTO" />
    </PagerContent>
</MudDataGrid>

@*<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>*@


@code {
    //private IEnumerable<Element> Elements = new List<Element>();
    private string _searchString;
    //private bool _sortNameByLength;
    // custom sort by name length
    //private Func<UserDTO, object> _sortBy => x =>
    //{
    //    if (_sortNameByLength)
    //        return x.LastName.Length;
    //    else
    //        return x.LastName;
    //};
    // quick filter - filter gobally across multiple columns with the same input
    private Func<UserDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        if ($"{x.UId}".Contains(_searchString))
            return true;

        return false;
    };

    //protected override async Task OnInitializedAsync()
    //{
    //    Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    //}

}