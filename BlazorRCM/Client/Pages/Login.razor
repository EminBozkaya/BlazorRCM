@page "/login"
@using BlazorRCM.Client.CustomComponents.ModalComponents
@using BlazorRCM.Shared.DTOs.ViewDTOs
@using BlazorRCM.Shared.Extensions
@layout BlazorRCM.Client.Shared.LoginLayout

<MudCard Style="border-radius:20px">
    @*<MudCard>*@
    <MudCardMedia Image="MyImages/Login/LoginPanel.png" Height="250" Style="position:relative" />

    <MudForm Model="@userLoginRequest">
        <MudCardContent>
            <MudTextField @bind-Value="@userLoginRequest.UserName"
                          Label="Kullanıcı Adı" />

            <MudTextField @bind-Value="@userLoginRequest.Password"
                          Label="Şifre" />

        </MudCardContent>

    </MudForm>

    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" OnClick="@loginProcess" Style="margin-left:90px; width:130px; height:50px; border-radius:15px">Giriş</MudButton>
        <MudButton Variant="Variant.Text"
                   EndIcon="@Icons.Filled.QuestionMark"
                   Color="Color.Error"
                   Style="text-transform:none; margin-left: 100px;">
            Şifremi Unuttum
        </MudButton>
    </MudCardActions>
</MudCard>

@*EndIcon="fa-light fa-comment-question"*@
@*<i class="fa-light fa-comment-question" style="color:red"></i>*@
@code {
    [Inject]
    HttpClient? Client { get; set; }

    [Inject]
    NavigationManager? NavManeger { get; set; }

    [Inject]
    ILocalStorageService? localStorageService { get; set; }

    [Inject]
    SweetAlertService? Sw { get; set; }

    [Inject]
    AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    [Inject]
    public IDialogService? DialogService { get; set; }

    [Inject]
    public ISnackbar? Snackbar { get; set; }

    private UserLoginRequestDTO userLoginRequest = new UserLoginRequestDTO();

    protected List<BranchProductPriceDTO> BranchProductPriceList = new();
    protected List<ProductSaleNoteDTO> ProductSaleNoteList = new();

    protected short BranchId = 1;//şimdilik

    private async Task loginProcess()
    {
        var httpReqRes = await Client!.PostAsJsonAsync("api/User/Login", userLoginRequest);

        if (httpReqRes.IsSuccessStatusCode)
        {
            try
            {
                var res = (await httpReqRes.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>())!;

                if (res.Success)
                {
                    await localStorageService!.SetItemAsync("token", res.Value!.ApiToken);
                    await localStorageService.SetItemAsync("email", res.Value.User!.Email);
                    await localStorageService.SetItemAsync("activeUserId", res.Value.User!.Id);
                    //LocalStorageExtension.EMail = res.Value.User!.Email!;
                    //string email = LocalStorageExtension.EMail;
                    await localStorageService.SetItemAsync("fullname", res.Value.User!.FullName);
                    await localStorageService!.SetItemAsync("themeModeSwitch", false);

                    (AuthenticationStateProvider as AuthStateProvider)!.NotifyUserLogin(res.Value.User.Email!);

                    Client!.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", res.Value.ApiToken);


                    //--------To Get and Set Active Users Other Info----------
                    List<UserBranchAuthorityDTO> UBAs = new();
                    List<short> userBranchIds = new();
                    List<string> userBranchNames = new();
                    List<short> userAuthorityTypeIds = new();

                    UBAs = await Client!.PostGetServiceResponseAsync<List<UserBranchAuthorityDTO>, int>("api/UserBranchAuthority/GetListByUserId", res.Value.User.Id, true);

                    for (int i = 0; i < UBAs.Count; i++)
                    {
                        userAuthorityTypeIds.Add(UBAs[i].ATId);
                        userBranchIds.Add(UBAs[i].BId);
                        userBranchNames.Add(UBAs[i].BranchName!);
                    }
                    await localStorageService!.SetItemAsync("userAuthorityTypeIds", userAuthorityTypeIds);
                    await localStorageService.SetItemAsync("userBranchIds", userBranchIds);
                    await localStorageService.SetItemAsync("userBranchNames", userBranchNames);

                    DialogOptions Options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
                    var dialog = DialogService!.Show<UsersBranchSelection>("ŞUBE SEÇİMİ", Options);
                    var result = await dialog.Result;
                    if (!result.Cancelled)
                    {
                        int index = userBranchNames!.IndexOf((result.Data.ToString())!);
                        Console.WriteLine(index.ToString());

                        BranchId = userBranchIds[index];
                        await localStorageService!.SetItemAsync("activeBranchId", BranchId);
                        await localStorageService!.SetItemAsync("activeBranchName", userBranchNames[index]);
                        await localStorageService.SetItemAsync("activeAuthorityTypeId", userAuthorityTypeIds[index]);
                        await LoadList();
                        NavManeger!.NavigateTo("/");
                    }
                    else Snackbar!.Add("Devam edebilmek için şube seçmelisiniz", Severity.Warning);

                }
                else
                {
                    await Sw!.FireAsync("Login Hatası", "Giriş başarısız", "error");
                    NavManeger!.NavigateTo("/logout");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
        else if ((int)httpReqRes.StatusCode == 401) await Sw!.FireAsync("Başarısız", "yetkiniz yok", "error");
        else
        {
            await Sw!.FireAsync("Başarısız", "Böyle bir kullanıcı yok", "error");
            //NavManeger.NavigateTo("/");
        }
    }

    protected async Task LoadList()
    {
        try
        {
            BranchProductPriceList = await Client!.PostGetServiceResponseAsync<List<BranchProductPriceDTO>, short>("api/BranchProductPrice/GetBranchList", BranchId, true);

            await localStorageService!.SetItemAsync<List<BranchProductPriceDTO>>("activeBranchProductPriceList", BranchProductPriceList);

            ProductSaleNoteList = await Client!.GetServiceResponseAsync<List<ProductSaleNoteDTO>>("api/ProductSaleNote/GetList", true);

            await localStorageService!.SetItemAsync<List<ProductSaleNoteDTO>>("ProductSaleNoteList", ProductSaleNoteList);
        }
        catch (ApiException ex)
        {
            await Sw!.FireAsync("Api Exception", ex.Message, "error");
        }
        catch (Exception ex)
        {
            await Sw!.FireAsync("Exception", ex.Message, "error");
        }
        finally
        {
            //_elementIsLoading = false;
            //StateHasChanged();
        }
    }
}







    @*@code {

    [Inject]
    HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavManeger { get; set; }

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private UserLoginRequestDTO userLoginRequest = new UserLoginRequestDTO();


    private async Task loginProcess()
    {
    var httpReqRes = await Client.PostAsJsonAsync("api/User/Login", userLoginRequest);

    if (httpReqRes.IsSuccessStatusCode)
    {
    try
    {
    var res = await httpReqRes.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

    if (res.Success)
    {

    await localStorageService.SetItemAsync("token", res.Value.ApiToken);
    await localStorageService.SetItemAsync("email", res.Value.User.EMailAddress);
    await localStorageService.SetItemAsync("UserId", res.Value.User.Id.ToString());
    await localStorageService.SetItemAsync("UserFullName", res.Value.User.FullName);

    (AuthenticationStateProvider as AuthStateProvider).NotifyUserLogin(res.Value.User.EMailAddress);

    Client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", res.Value.ApiToken);

    NavManeger.NavigateTo("/");
    }
    else
    {

    await ModalManager.ShowMessageAsync("Login Error", res.Message);

    }
    }
    catch (Exception ex)
    {
    await ModalManager.ShowMessageAsync("Login Error", ex.Message);
    }
    }

    }

    }*@