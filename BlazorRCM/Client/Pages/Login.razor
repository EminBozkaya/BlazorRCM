@page "/login"
@layout BlazorRCM.Client.Shared.EmptyLayout


<MudCard Style="position:fixed; width:600px;">
    <MudCardMedia Image="MyImages/Login/LoginPanel.png" Height="200" Style="position:relative" />
    
    <MudForm Model="@userLoginRequest">
        <MudCardContent>
            <MudTextField @bind-Value="@userLoginRequest.UserName"
                          Label="Kullanıcı Adı" />

            <MudTextField @bind-Value="@userLoginRequest.Password"
                          Label="Şifre" />

        </MudCardContent>

    </MudForm>

<MudCardActions>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@loginProcess">Giriş</MudButton>
</MudCardActions>
</MudCard>


@code {

    [Inject]
    HttpClient? Client { get; set; }

    //[Inject]
    //ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager? NavManeger { get; set; }

    [Inject]
    ILocalStorageService? localStorageService { get; set; }

    //[Inject]
    //AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private UserLoginRequestDTO userLoginRequest = new UserLoginRequestDTO();


    private async Task loginProcess()
    {
        var httpReqRes = await Client.PostAsJsonAsync("api/ManageUser/Login", userLoginRequest);

        if (httpReqRes.IsSuccessStatusCode)
        {
            try
            {
                var res = await httpReqRes.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

                if (res.Success)
                    NavManeger.NavigateTo("/userlist");
                else
                    throw new Exception("böyle biri yok");
            }
            catch (Exception ex)
            {
                NavManeger.NavigateTo("/");
            }
        }
    }

}







    @*@code {

    [Inject]
    HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavManeger { get; set; }

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private UserLoginRequestDTO userLoginRequest = new UserLoginRequestDTO();


    private async Task loginProcess()
    {
    var httpReqRes = await Client.PostAsJsonAsync("api/User/Login", userLoginRequest);

    if (httpReqRes.IsSuccessStatusCode)
    {
    try
    {
    var res = await httpReqRes.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

    if (res.Success)
    {

    await localStorageService.SetItemAsync("token", res.Value.ApiToken);
    await localStorageService.SetItemAsync("email", res.Value.User.EMailAddress);
    await localStorageService.SetItemAsync("UserId", res.Value.User.Id.ToString());
    await localStorageService.SetItemAsync("UserFullName", res.Value.User.FullName);

    (AuthenticationStateProvider as AuthStateProvider).NotifyUserLogin(res.Value.User.EMailAddress);

    Client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", res.Value.ApiToken);

    NavManeger.NavigateTo("/");
    }
    else
    {

    await ModalManager.ShowMessageAsync("Login Error", res.Message);

    }
    }
    catch (Exception ex)
    {
    await ModalManager.ShowMessageAsync("Login Error", ex.Message);
    }
    }

    }

    }*@